<?php
// Variable that determines if you want to display all generated rules or not
// $display_all_rules = true; // set true or false
if (!defined('DIRECT_ACCESS')) {
    define('DIRECT_ACCESS', true);
}

?>
<!DOCTYPE html>
<html>
<head>
    <title>Drug Recommendations</title>
    <!-- <link href="../images/SIDES_head_icon.png" rel="icon"> -->
    <style>
        /* Reset default list styles */
        ul {
            list-style-type: none;
            padding: 0;
        }

        /* Spacing between list items */
        li {
            margin-bottom: 10px;
        }

        /* Styles for left-hand side items */
        .lhs {
            color: red;
            font-weight: bold;
        }

        /* Styles for right-hand side items */
        .rhs {
            color: green;
            font-weight: bold;
        }

        /* Common style for confidence */
        .confidence {
            font-weight: bold;
        }

        /* Styles for drug names */
        .drug-name {
            font-style: italic;
        }
    </style>
</head>
<body>
    <header>
        <?php
        include "../navigation.php";
        ?>
    </header>
    <h2 id="header"></h2>
    <?php
    error_reporting(E_ALL);
    ini_set('display_errors', 1);

    // Include the FP-Growth implementation classes
    require __DIR__ . '/../vendor/autoload.php';

    // Function to preprocess ratings to binary values (like or dislike)
    function preprocessRatings($rating) {
        return ($rating >= 4) ? 0 : 1;
    }

    // Database connection parameters
    $servername = "localhost";
    $username = "root";
    $password = "root";
    $dbname = "sides";

    // Create a connection
    $link = mysqli_connect($servername, $username, $password, $dbname);
    if (mysqli_connect_error()) {
        die("Connection failed: " . mysqli_connect_error());
    }

    // Create an array to store user transactions (user_id => transaction)
    $transactions = array();

    // Set the minimum support and confidence thresholds
    $minSupport = 2;
    $minConfidence = 0.1;

    // Fetch unique user IDs
    $userQuery = "SELECT DISTINCT userid FROM review";
    $userResult = mysqli_query($link, $userQuery);

    // Initialize the array to store all transactions
    $allTransactions = array();

    // Fetch user reviews and sort by review date
    while ($userRow = mysqli_fetch_assoc($userResult)) {
        $userId = $userRow['userid'];
        $userTransactions = array(); // Create a new array for this user's transactions

        // Query to fetch user reviews
        $query = "SELECT drug_id, rating, review_date FROM review WHERE userid = $userId ORDER BY review_date ASC";
        $result = mysqli_query($link, $query);

        if ($result) {
            while ($row = mysqli_fetch_assoc($result)) {
                $drug_id = $row["drug_id"];
                $rating = $row["rating"];
                $ratingCategory = preprocessRatings($rating);
                $userTransactions[] = $drug_id . ':' . $ratingCategory;
            }
            mysqli_free_result($result);

            // Add the user's transactions to the overall transactions array
            $allTransactions[] = $userTransactions;
        } else {
            echo "Error fetching user reviews for user ID $userId: " . mysqli_error($link);
        }
    }
    // var_dump($allTransactions);

    // Create an instance of the FP-Growth class
    $fpgrowth = new \EnzoMC\PhpFPGrowth\FPGrowth($minSupport, $minConfidence);

    // Run the FP-Growth algorithm with all transactions
    $fpgrowth->run($allTransactions);

    // Retrieve and work with the patterns and rules generated by the algorithm
    $patterns = $fpgrowth->getPatterns();
    // var_dump($patterns);
    $rules = $fpgrowth->getRules();

    // // Fetch the mapping of drug_id to drug_brand
    // $drugIdToBrandMapping = array();
    // $mappingQuery = "SELECT drug_id, drug_brand FROM drugs";
    // $mappingResult = mysqli_query($link, $mappingQuery);

    // if ($mappingResult) {
    //     while ($row = mysqli_fetch_assoc($mappingResult)) {
    //         $drugIdToBrandMapping[$row['drug_id']] = $row['drug_brand'];
    //     }
    //     mysqli_free_result($mappingResult);
    // } else {
    //     echo "Error fetching drug mapping: " . mysqli_error($link);
    // }

    // Create an associative array to store unique rules
    $uniqueRules = array();

    $Finalrules = array(); # Stores the final rules
    echo '<ul>';

    // Process and filter the LHS (Left Hand Side) and RHS (Right Hand Side) of the rules
    foreach ($rules as $rule) {
        if (count($rule) >= 2) {
            list($LHS, $RHS) = $rule;

            // Check if RHS has no commas (only one drug on the right)
            if (substr_count($RHS, ',') === 0) {
                $LHSItems = explode(',', $LHS);
                $LHSBrands = array();
                $isDislike = false;
                $isLike = false;

                foreach ($LHSItems as $item) {
                    list($drugId, $rating) = explode(':', $item);

                    if (is_numeric($drugId)) {
                        $brandQuery = "SELECT drug_brand FROM drugs WHERE drug_id = $drugId";
                        $brandResult = mysqli_query($link, $brandQuery);

                        if ($brandResult) {
                            $brandRow = mysqli_fetch_assoc($brandResult);

                            if (isset($brandRow['drug_brand'])) {
                                $LHSBrands[] = '<span class="drug-name">' . $brandRow['drug_brand'] . '</span>';
                                if ($rating == 1) {
                                    $isDislike = true;
                                }
                            }

                            mysqli_free_result($brandResult);
                        } else {
                            echo "Error fetching drug brand for drug ID $drugId: " . mysqli_error($link);
                        }
                    }
                }

                $RHSBrands = array();
                $isUnexpectedFormatRHS = false;

                if (!empty($RHS)) {
                    $RHSItems = explode(',', $RHS);

                    foreach ($RHSItems as $item) {
                        list($drugId, $rating) = explode(':', $item);

                        if (is_numeric($drugId)) {
                            $brandQuery = "SELECT drug_brand FROM drugs WHERE drug_id = $drugId";
                            $brandResult = mysqli_query($link, $brandQuery);

                            if ($brandResult) {
                                $brandRow = mysqli_fetch_assoc($brandResult);

                                if (isset($brandRow['drug_brand'])) {
                                    $RHSBrands[] = '<span class="drug-name">' . $brandRow['drug_brand'] . '</span>';
                                    if ($rating == 0) {
                                        $isLike = true;
                                    }
                                }

                                mysqli_free_result($brandResult);
                            } else {
                                echo "Error fetching drug brand for drug ID $drugId: " . mysqli_error($link);
                            }
                        } else {
                            $isUnexpectedFormatRHS = true;
                        }
                    }
                }

                if (!$isUnexpectedFormatRHS) {
                    // Check if the format of the RHS is as expected (no errors)

                // Initialize counters for the numerator and denominator
                $numerator = 0;  // This will count cases where both LHS is disliked and RHS is liked
                $denominator = 0;  // This will count cases where LHS is disliked and RHS is tried

                foreach ($allTransactions as $transaction) {
                    // Initialize flags to track if LHS is disliked and RHS is liked for this transaction
                    $lhsDisliked = true;  // Assume LHS is initially disliked

                    foreach ($LHSItems as $item) {
                        // Iterate through the items on the left-hand side of the rule
                        list($drugId, $rating) = explode(':', $item);
                        $found = false;  // Flag to track if this item was found in the transaction

                        foreach ($transaction as $transItem) {
                            // Iterate through the items in the user's transaction
                            list($transDrugId, $transRating) = explode(':', $transItem);

                            if ($transDrugId == $drugId && $transRating == 1) {
                                // If the item on LHS is found and disliked (rating = 1) in the transaction
                                $found = true;
                                break;  // No need to continue searching
                            }
                        }

                        if (!$found) {
                            // If any LHS item is not found or not disliked in the transaction, set the flag to false
                            $lhsDisliked = false;
                            break;  // No need to check the remaining LHS items
                        }
                    }

                    $rhsDisliked = false; // Flag to track if RHS is disliked in this transaction

                    foreach ($RHSItems as $item) {
                        // Iterate through the items on the right-hand side of the rule
                        list($drugId, $rating) = explode(':', $item);
                        $found = false; // Flag to track if this item was found in the transaction

                        foreach ($transaction as $transItem) {  
                            // echo "<br>";
                            // var_dump($transItem);  
                            // echo "<br>";                        
                            // Iterate through the items in the user's transaction
                            list($transDrugId, $transRating) = explode(':', $transItem);

                            if ($transDrugId == $drugId && $transRating == 1) {
                                // If the item on RHS is found and disliked (rating = 1) in the transaction
                                $rhsDisliked = true;
                                break; // No need to continue searching
                            }
                        }
                    }

                    $rhsLiked = false; // Flag to track if RHS is liked in this transaction

                    foreach ($RHSItems as $item) {
                        // Iterate through the items on the right-hand side of the rule
                        list($drugId, $rating) = explode(':', $item);
                        $found = false; // Flag to track if this item was found in the transaction

                        foreach ($transaction as $transItem) {  
                            // var_dump($transItem);                          
                            // Iterate through the items in the user's transaction
                            list($transDrugId, $transRating) = explode(':', $transItem);

                            if ($transDrugId == $drugId && $transRating == 0) {
                                // If the item on RHS is found and liked (rating = 0) in the transaction
                                $rhsLiked = true;
                                break; // No need to continue searching
                            }
                        }
                    }

                    if ($lhsDisliked && ($rhsDisliked || $rhsLiked)) {
                        // If LHS is disliked, and either RHS is disliked or RHS is liked in this transaction
                        $denominator++;

                        if ($rhsLiked) {
                            // If RHS is liked in this transaction, increment the numerator
                            $numerator++;
                        }
                    }
                }

                // Calculate the "Satisfaction Confidence" only once, after processing all transactions
                $satisfactionConfidence = ($denominator > 0) ? ($numerator / $denominator * 100) : 0;
                $satisfactionConfidence = number_format($satisfactionConfidence, 0); // Format as an integer percentage

                // Now, display the rule and satisfaction confidence based on the overall calculations
                // ... (rest of the code for displaying the rule)
                    // Create a unique rule string for checking duplicates
                    $uniqueRuleString = $LHS . ' => ' . $RHS;

                    if (!isset($uniqueRules[$uniqueRuleString])) {
                        // Display the rule only if it is what you want (LHS = Dislike and RHS = Like)
                        if ($isDislike && $isLike && $satisfactionConfidence > 0) {
                            $Finalrules[$uniqueRuleString] = [implode(', ', $LHSBrands), implode(', ', $RHSBrands), $satisfactionConfidence];
                            // Add this condition to check if it's included as part of the main script. If true, then all the generated rules will be displayed
                            if (defined('DIRECT_ACCESS') && DIRECT_ACCESS === true) {
                                echo '<li>If you <span class="lhs">dislike ' . implode(', ', $LHSBrands) . '</span>, you may instead <span class="rhs">like ' . implode(', ', $RHSBrands) . '</span> <span class="confidence">(Satisfaction Confidence: ';

                                // Calculate the "Satisfaction Confidence" in terms of stars
                                $starRating = '';

                                if ($satisfactionConfidence >= 1 && $satisfactionConfidence < 10) {
                                    $starRating = '☆☆☆☆☆'; // 0 stars
                                } elseif ($satisfactionConfidence >= 10 && $satisfactionConfidence < 30) {
                                    $starRating = '★☆☆☆☆'; // 1 star
                                } elseif ($satisfactionConfidence >= 30 && $satisfactionConfidence < 50) {
                                    $starRating = '★★☆☆☆'; // 2 stars
                                } elseif ($satisfactionConfidence >= 50 && $satisfactionConfidence < 70) {
                                    $starRating = '★★★☆☆'; // 3 stars
                                } elseif ($satisfactionConfidence >= 70 && $satisfactionConfidence < 90) {
                                    $starRating = '★★★★☆'; // 4 stars
                                } elseif ($satisfactionConfidence >= 90) {
                                    $starRating = '★★★★★'; // 5 stars
                                } else {
                                    $starRating = '☆☆☆☆☆'; // 0 stars
                                }

                                echo $starRating . ' ' . $satisfactionConfidence . '%';
                                echo ')</span></li>';
                            }

                            // Mark this rule as seen in the uniqueRules array
                            $uniqueRules[$uniqueRuleString] = true;
                        }
                        // var_dump($uniqueRules);
                    }
                }
            }
        }
    }
    echo '</ul>';
    $link->close();
    // var_dump($Finalrules);
    ?>
    <?php
    include "../footer.php";
    ?>
</body>
</html>
